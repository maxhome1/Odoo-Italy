#! /bin/bash
# Run Odoo V7 yaml tests
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
version="V2.0.5"


# get value from odoo config file
# $1: odoo config file
# $2: param name
get_cfg_value() {
  p=`grep "^$2 *=.*" $1|awk -F"=" '{print $2}'`
  p=$(echo $p)
  if [ -z "$p" -o "$p" == "None" ]
  then
   if [ "$2" == "pidfile" ]
   then
     if [ -d "/var/run/openerp" ]
     then
       p="/var/run/openerp/openerp-server.pid"
     else
       p="/var/run/openerp-server.pid"
     fi
   elif [ "$2" == "xmlrpc_port" ]
   then
     p="8069"
   fi
  fi
  echo $p
}


# Wait for odoo service goes down
# $1: port
wait4svcdown() {
  for t in {1..9}
  do
    netstat -nat|grep "\:$1.*LISTEN">/dev/null
    if [ $? -eq 0 ]
    then
      sleep 1
    else
      break
    fi
  done
}


# wait for odoo service goes up
# $1: port
wait4svcup() {
  for t in {1..9}
  do
    netstat -nat|grep "\:$1.*LISTEN">/dev/null
    if [ $? -gt 0 ]
    then
      sleep 1
    else
      break
    fi
  done
}


# kill all odoo server duplicate processes
# $1: if halt kill main process too
# $2: pidfile
# $3: service name (if $1 not null)
kill_alls() {
  svc_port=""
  if [ -e $2 ] 
  then
    pid=`cat $2`
  else
    pid="999999999"
  fi
  if [ "$1" != "" ]
  then
    svc_port=$(get_cfg_value $1 "xmlrpc_port")
    if [ `service_sts "" "$1"` ]
    then
       service $3 stop	
    fi
  fi
  for p in `ps aux|grep "openerp[-]server .*conf"|awk '{print $2}'`
  do
    if [ "$p" != "$pid" ]
    then
      kill $p
    fi
  done
  if [ "$1" != "" ]
  then
    wait4svcdown "$svc_port"
    if `ps aux|grep "openerp[-]server .*conf"|awk '{print $2}'>/dev/null`
    then
      for p in `ps aux|grep "openerp[-]server .*conf"|awk '{print $2}'`
      do
        kill $p
      done
    fi
  fi
}


# stop odoo service and wait for go down
# $1: service name
# $2: config file
service_down() {
  if [ `service_sts "" "$2"` ]
  then
    service $1 stop
  fi
  pidfile=$(get_cfg_value "$2" "pidfile")
  kill_alls "$2" "$pidfile" "$1"
}

# start odoo service and wait for go up
# $1: service name
# $2: config file
service_up() {
  pidfile=$(get_cfg_value "$2" "pidfile")
  odoo_port=$(get_cfg_value $odoo_cfg "xmlrpc_port")
  odoo_start="service $1 start"
  $odoo_start
  wait4svcup "$odoo_port"
}


# service status
# $1: service name
# $2: config file
service_sts() {
  pidfile=$(get_cfg_value "$2" "pidfile")
  odoo_port=$(get_cfg_value $odoo_cfg "xmlrpc_port")
  if [ -e $pidfile ]
  then
    pid=`cat $pidfile`
  else
    pid="999999999"
  fi
  sts=1
  for p in `ps aux|grep "openerp[-]server .*conf"|awk '{print $2}'`
  do
    if [ "$p" == "$pid" ]
    then
      sts=0
    fi
  done
  return $sts
}


# exec yaml test on module
# $1: option
# $2: null
# $3: module to test
# $4: file to write log (append)
# $5: database
# $6: username^odoo_config_file^user_home^svc_root^dir_tlog^svc_name^svc_file^svc_port
exec_test() {
  opt_user=`echo "$6"|awk -F"^" '{print $1}'`
  odoo_cfg=`echo "$6"|awk -F"^" '{print $2}'`
  userhome=`echo "$6"|awk -F"^" '{print $3}'`
  svc_root=`echo "$6"|awk -F"^" '{print $4}'`
  dir_tlog=`echo "$6"|awk -F"^" '{print $5}'`
  svc_name=`echo "$6"|awk -F"^" '{print $6}'`
  svc_file=`echo "$6"|awk -F"^" '{print $7}'`
  svc_port=`echo "$6"|awk -F"^" '{print $8}'`

  # echo "exec_test $1 $3 $4 $5 U=$opt_user c=$odoo_cfg h=$userhome r=$svc_root s=$svc_name F=$svc_file"  #debug
  odoo_tcfg="$userhome/.openerp_serverrc"
  odoo_log="$dir_tlog/$3.log"
  cp $odoo_cfg $odoo_tcfg
  if `grep "^test_report_directory *=" $odoo_tcfg >/dev/null`
  then
    sed -i "s|^test_report_directory *=.*|test_report_directory = $dir_tlog|" $odoo_tcfg
  else
    echo "test_report_directory = $dir_tlog">>$odoo_tcfg
  fi
  if [ "$svc_port" != "8069" ]
  then
    if `grep "^xmlrpc_port *=" $odoo_tcfg >/dev/null`
    then
      sed -i "s|^xmlrpc_port *=.*|xmlrpc_port = $svc_port|" $odoo_tcfg
    else
      echo "xmlrpc_port = $svc_port">>$odoo_tcfg
    fi
    let p=$svc_port+1
    if `grep "^xmlrpcs_port *=" $odoo_tcfg >/dev/null`
    then
      sed -i "s|^xmlrpcs_port *=.*|xmlrpcs_port = $p|" $odoo_tcfg
    else
      echo "xmlrpcs_port = $p">>$odoo_tcfg
    fi
  fi
  chown $opt_user:$opt_user $odoo_tcfg

  if [[ "$1" == *"t"* ]]
  then
    sed -i "s|logfile *=.*|logfile = False|" $odoo_tcfg
  else
    sed -i "s|^logfile *=.*|logfile = $odoo_log|" $odoo_tcfg
  fi
  odoo_db="$5"
  odoo_stop="service_down $svc_name $odoo_cfg"
  odoo_start="service_up $svc_name $odoo_cfg"
  odoo_cmd="$svc_file"
  odoo_opt="--log-level=test -c $odoo_tcfg -i $3 --test-enable -d $odoo_db --stop-after-init"
  if [ -e "$odoo_log" ]
  then
    if [ -e "${odoo_log}.bak" ]
    then
      rm -f ${odoo_log}.bak
    fi
    mv -f $odoo_log ${odoo_log}.bak
  fi
  odoo_port=$(get_cfg_value $odoo_cfg "xmlrpc_port")
  if [[ "$1" != *"q"* ]]
  then
    if [ "$svc_port" == "$odoo_port" ]
    then
      $odoo_stop
    fi
  fi
  if [[ "$1" == *"t"* ]]
  then
    su -l $opt_user -c "$odoo_cmd $odoo_opt|tee $odoo_log"
  else
    su -l $opt_user -c "$odoo_cmd $odoo_opt"
  fi
  pidfile=$(get_cfg_value $odoo_tcfg "pidfile")
  if [[ "$1" == *"q"* ]]
  then
    kill_alls "" "$pidfile"
  elif [ "$svc_port" == "$odoo_port" ]
  then
    kill_alls "$odoo_tcfg" "$pidfile" "$svc_name"
    $odoo_start
  else
    kill_alls "" "$pidfile"
  fi
  if [ -e "$odoo_log" ]
  then
    ct=`grep -c " TEST " $odoo_log`
    cw=`grep -c " WARNING " $odoo_log`
    ce=`grep -c " ERROR " $odoo_log`
    cx=`grep -c " TEST .*OK" $odoo_log`
    ts=`date +%Y-%m-%d\ %H:%M:%S`
    if [ "$ce" -eq 0 -a "$cx" -gt 0 ]
    then
      if [ "$cw" -eq 0 ]
      then
        result="[!!OK!!]"
      else
        result="[ !OK! ]"
      fi
    elif [ "$ce" -eq 0 ]
    then
      if [ "$cw" -eq 0 -a "$ct" -gt 0 ]
      then
        result="[  OK  ]"
      elif [ "$cw" -gt 0 -a "$ct" -gt 0 ]
      then
        result="[ WARN ]"
      elif [ "$cw" -gt 0 -a "$ct" -eq 0 ]
      then
        result="[NOT OK]"
      else
        result="[NULL!?]"
      fi
    else
      result="[FAILED]"
    fi
  else
    result="[FAILED]"
  fi
  echo -e "$ts\t$result\t$3\t./${odoo_cmd##*/} $odoo_opt">>$4
}


# udpate odoo module
# $1: modules list (comma separated)
# $2: database
# $3:  username^odoo_config_file^user_home^svc_root^dir_tlog^svc_name^svc_file^svc_port
update_odoo () {
  opt_user=`echo "$3"|awk -F"^" '{print $1}'`
  odoo_cfg=`echo "$3"|awk -F"^" '{print $2}'`
  userhome=`echo "$3"|awk -F"^" '{print $3}'`
  svc_root=`echo "$3"|awk -F"^" '{print $4}'`
  dir_tlog=`echo "$3"|awk -F"^" '{print $5}'`
  svc_name=`echo "$6"|awk -F"^" '{print $6}'`
  svc_file=`echo "$6"|awk -F"^" '{print $7}'`
  svc_port=`echo "$6"|awk -F"^" '{print $8}'`

  # echo "update $1 $3 $4 $5 U=$opt_user c=$odoo_cfg h=$userhome r=$svc_root s=$svc_name F=$svc_file"  #debug

  odoo_log="$dir_tlog/$2.log"
  odoo_cmd="service $svc_name restart"
  odoo_opt="-u $1"
  if [ "$2" != "" -a "$2" != "test" ]
  then
    odoo_opt="$odoo_opt -d $2"
  fi
  odoo_stop="service_down $svc_name $odoo_cfg"
  odoo_start="service_up $svc_name $odoo_cfg"
  $odoo_stop
  echo "Restart Odoo server"
  echo "$odoo_cmd $odoo_opt"
  $odoo_cmd $odoo_opt
  wait4svcup "$svc_port"
}


# get module priority
# $1: file to examine
get_module_prio() {
  f=$(basename $1)
  n=prio_list_$f
  prio=${!n}
  if [ -z "$prio" ]
  then
    prio=9
  fi
  echo $prio
}

# get module name
# $1: dir module
# $2: odoo configuration file
# $3: module_path
# $4: script filename
get_module_name() {
  mpath=$(get_cfg_value $2 "addons_path")
  mpath=`echo ${mpath//,/ }`
  # mpath=`echo $mpath|sed -e s^$3^.^g`
  p="${4%/*}"
  if [ "$p" != "" ]
  then
    mpath="$p/openerp/addons $mpath"
  fi 

  for r in $mpath
  do
    l=${#r}
    if [ "${1:0:l}" == "$r" ]
    then
      p=""
      for i in {2..9}
      do
        x=`echo "$1"|awk -F"/" '{print $'$i'}'`
        if [ "$p" == "$r" ]
        then
          m=$x
          break
        else
          p="$p/$x"
        fi
      done
      break
    fi
  done
  echo "$m"
}


# Search for tests to do
# $1: option
# $2: selected prio (null=all)
# $3: selected module (null=all)
# $4: action (test,update,list)
# $5: database
# $6: username^odoo_config_file^user_home^svc_root^dir_tlog^svc_name^svc_file^svc_port
# $7: yaml test module list
search4tests() {
  if [[ "$1" != *"y"* ]]
  then
    echo "Warning! This command stop openerp service!!!!"
    read -p "Press ENTER to start>"
  fi

  opt_user=`echo "$6"|awk -F"^" '{print $1}'`
  odoo_cfg=`echo "$6"|awk -F"^" '{print $2}'`
  userhome=`echo "$6"|awk -F"^" '{print $3}'`
  svc_root=`echo "$6"|awk -F"^" '{print $4}'`
  dir_tlog=`echo "$6"|awk -F"^" '{print $5}'`
  svc_name=`echo "$6"|awk -F"^" '{print $6}'`
  svc_file=`echo "$6"|awk -F"^" '{print $7}'`
  svc_port=`echo "$6"|awk -F"^" '{print $8}'`

  # echo "search $1 $3 $4 $5 U=$opt_user c=$odoo_cfg h=$userhome r=$svc_root s=$svc_name F=$svc_file"  #debug

  module_list=""
  yaml_test_list="$7"
  resultlog="$dir_tlog/result.log"

  if [ "$4" == "test" ]
  then
    if [[ "$1" == *"n"* ]]
    then
      echo `date +%Y-%m-%d\ %H:%M:%S`>$resultlog
    fi
  fi

  mpath=$(get_cfg_value $odoo_cfg "addons_path")
  mpath=`echo ${mpath//,/ }`
  p="${svc_file%/*}"
  if [ "$p" != "" ]
  then
    mpath="$p/openerp/addons $mpath"
  fi

  if [ "$4" == "list" -o "$4" == "update" ]
  then
    for r in $mpath
    do
      for f in `find $r -name "__init__.py" -exec grep -l "fast_suite\|checks" '{}' \;`
      do
        p=$(dirname $f)
        m=$(get_module_name "$p" "$odoo_cfg" "$r" "$svc_file")
        if [ "$m" != "" ]
        then
          if [ "$3" == "" -o "$3" == "$m" ]
          then
            prio=$(get_module_prio $m)
            if [ "$2" == "" -o "$2" == "$prio" ]
            then
              if ! `echo "$module_list"|grep "$m,\|$m\$">/dev/null`
              then
                module_list="$module_list,$m"
                if [[ "$1" == *"v"* ]]
                then
                  echo "$m($prio) -u $p"
                elif [ "$4" == "list" ]
                then
                  echo "$m($prio) -u $p"
                fi
              fi
            fi
          fi
        fi
      done
    done
    module_list=${module_list:1}
    if [ "$4" == "update" ]
    then
      if [[ "$1" == *"v"* ]]
      then
        echo "service openerp restart -u $module_list"
      fi
      update_odoo "$module_list" "$5"
    fi
  fi

  if [ "$4" == "list" -o "$4" == "test" ]
  then
    yaml_test_list=`echo ${yaml_test_list//,/ }`
    for x in $yaml_test_list
    do
      m=`echo "$x"|awk -F":" '{print $1}'`
      prio=`echo "$x"|awk -F":" '{print $2}'`
      if [ "$2" == "" -o "$2" == "$prio" ]
      then
        if [ "$4" == "list" ]
        then
          echo "$m($prio) -yaml"
        elif [ "$4" == "test" ]
        then
          if [[ "$1" == *"v"* ]]
          then
            echo "./${svc_file##*/} -i $m($prio) -d $5 ($svc_name)"
          fi
          exec_test "$1" "" "$m" "$resultlog" "$5" "$6"
        fi
      fi
    done
  fi
}

# main
opt_force=""
opt_help=0
opt_alt=""
opt_prio=""
opt_module=""
opt_action="help"
opt_db="test"
opt_verbose=""
opt_trace=""
opt_new=""
opt_quick=""
opt_stats=""
opt_all=""
odoo_cfg="/etc/openerp-server.conf"
opt_user="openerp"
svc_root=""
svc_port="8069"
if [ -e "/etc/init.d/openerp" ]
then
  svc_name="openerp"
elif [ -e "/etc/init.d/openerp-server" ]
then
  svc_name="openerp-server"
else
  svc_name=""
fi
svc_file=""
for i in {1..9}
do
  o="${!i}"
  if [ "${!i}" == "--all" ]
  then
    opt_all="${!i}"
    opt_force="-y"
  elif [ "${o:0:1}" == "-" ]
  then
    for k in {1..9}
    do
      if [ "${o:k:1}" == "a" ] # -a (alternate)
      then
        opt_alt="-${o:k:1}"
        svc_port="8089"
        opt_quick="-q"
        opt_action="test"
      elif [ "${o:k:1}" == "c" ] # -c odoo configuration file
      then
        let j=k+1
        odoo_cfg=${o:j}
        if [ -z "$odoo_cfg" ]
        then
          let j=i+1
          odoo_cfg="${!j}"
        fi
        if [ -z "$odoo_cfg" ]
        then
          odoo_cfg="/etc/openerp-server.conf"
        fi
      elif [ "${o:k:1}" == "d" ] # -d database
      then
        let j=k+1
        opt_db=${o:j}
        if [ -z "$opt_db" ]
        then
          let j=i+1
          opt_db="${!j}"
        fi
      elif [ "${o:k:1}" == "F" ] # -F file
      then
        let j=k+1
        svc_file=${o:j}
        if [ -z "$svc_file" ]
        then
          let j=i+1
          svc_file="${!j}"
        fi
      elif [ "${o:k:1}" == "h" ] # -h (help)
      then
        opt_help=1
      elif [ "${o:k:1}" == "l" ] # -l (list)
      then
        opt_action="list"
        opt_force="-y"
      elif [ "${o:k:1}" == "L" ] # -L module
      then
        opt_action="stat"
        opt_force="-y"
        let j=k+1
        opt_module=${o:j}
        if [ -z "$opt_module" ]
        then
          let j=i+1
          opt_module="${!j}"
        fi
      elif [ "${o:k:1}" == "m" ] # -m module
      then
        let j=k+1
        opt_module=${o:j}
        if [ -z "$opt_module" ]
        then
          let j=i+1
          opt_module="${!j}"
        fi
      elif [ "${o:k:1}" == "n" ] # -n (new)
      then
        opt_new="-${o:k:1}"
      elif [ "${o:k:1}" == "p" ] # -p prio
      then
        let j=k+1
        opt_prio=${o:j}
        if [ -z "$opt_prio" ]
        then
          let j=i+1
          opt_prio="${!j}"
        fi
      elif [ "${o:k:1}" == "P" ] # -P port
      then
        let j=k+1
        svc_port=${o:j}
        if [ -z "$svc_port" ]
        then
          let j=i+1
          svc_port="${!j}"
        fi
      elif [ "${o:k:1}" == "q" ] # -q (quick)
      then
        opt_quick="-${o:k:1}"
      elif [ "${o:k:1}" == "r" ] # -r dir
      then
        let j=k+1
        svc_root=${o:j}
        if [ -z "$svc_root" ]
        then
          let j=i+1
          svc_root="${!j}"
        fi
      elif [ "${o:k:1}" == "S" ] # -S name
      then
        let j=k+1
        svc_name=${o:j}
        if [ -z "$svc_name" ]
        then
          let j=i+1
          svc_name="${!j}"
        fi
        if [ -z "$svc_name" ]
        then
          svc_name="openerp"
        fi
      elif [ "${o:k:1}" == "t" ] # -t (tracelog)
      then
        opt_trace="-${o:k:1}"
        if [ "$opt_action" == "help" ]
        then
          opt_action="test"
         fi
      elif [ "${o:k:1}" == "T" ] # -T (test)
      then
        opt_action="test"
      elif [ "${o:k:1}" == "u" ] # -u (update)
      then
        opt_action="update"
      elif [ "${o:k:1}" == "U" ] # -U username
      then
        let j=k+1
        opt_user=${o:j}
        if [ -z "$opt_user" ]
        then
          let j=i+1
          opt_user="${!j}"
        fi
        if [ -z "$opt_user" ]
        then
          opt_user="openerp"
        fi
      elif [ "${o:k:1}" == "v" ] # -v (verbose)
      then
        opt_verbose="-${o:k:1}"
      elif [ "${o:k:1}" == "x" ] # -x (stats)
      then
        opt_stats="-${o:k:1}"
      elif [ "${o:k:1}" == "y" ] # -y (assume yes)
      then
        opt_force="-${o:k:1}"
        if [ "$opt_action" == "help" ]
        then
          opt_action="test"
         fi
      fi
    done
  fi
done
if [ "$opt_all" == "--all" -a "$opt_action" == "help" -a $opt_help -eq 0 ]
then
  opt_action="test"
fi
if [ "$opt_action" == "help" ]
then
  opt_help=1
fi
if [ $opt_help -gt 0 ]
then
  echo "Odoo test exection $version"
  echo "Run yaml test on Odoo V7. Results are store in ~/testlog direcotry"
  echo "$(basename $0) [-h] [--all] [-alnqtTuvxy] [-c config] [-d databse] "
  echo "               [-m module] [-p prio] [-r dir] [-S name] [-U user]"
  echo "  -h show this help"
  echo "  --all       execute all tests, priority order (implies -y)"
  echo "  -a          run test concurrently with odoo service (implies -q)"
  echo "  -c config   use odoo config file (default /etc/openerp-server.conf)"
  echo "  -d database select database for test (default test)"
  echo "  -F file     odoo script filename (for test execution)"
  echo "  -l          do nothing, just list modules and priority"
  echo "  -L module   show historical stats of module"
  echo "  -m module   select specific module for test"
  echo "  -n          create new log for test result"
  echo "  -p prio     select test with selected prio"
  echo "  -P port     odoo service port (default 8069)"
  echo "  -q          quick mode: do not restart odoo after every test"
  echo "  -r dir      service root dir (def v7 or v8 or lp in home dir)"
  echo "  -S name     service name (default openerp)"
  echo "  -t          output tracelog of yaml test during tests"
  echo "  -T          execute yaml test"
  echo "  -u          do not execute yaml test, update module of Odoo"
  echo "  -U username service username (default openerp)"
  echo "  -v          verbose mode"
  echo "  -x          show stats at the end"
  echo "  -y          assume yes for ask confirmation"
  echo ""
  echo "(C) 2015 by zeroincombenze(R) - http://www.zeroincombenze.it"
  echo "Author: antoniomaria.vigliotti@gmail.com"
  echo "Licence: Affero GPL"
  exit
fi

if [ -z "$svc_name" ]
then
  echo "No odoo service found!!!"
  echo " try using -s"
  exit 1
fi
if [ -z "$svc_port" ]
then
  svc_port="8069"
fi
userhome=$(sudo -u $opt_user -i eval 'echo "$HOME"')
if [ -z "$userhome" ]
then
  userhome=$(grep openerp /etc/passwd|awk -F":" '{print $6}')
fi
if [ -z "$userhome" ]
then
  echo "Invalid username $7 or user configuration!!!"
  echo " try using -U"
  exit 1
fi
if [ ! -d $userhome ]
then
  echo "Invalid username $7 or user configuration!!!"
  echo " try using -U"
  exit 1
fi
if [ ! -e $userhome/testlog ]
then
  mkdir $userhome/testlog
  chown $opt_user:$opt_user $userhome/testlog
  chmod a+rw $userhome/testlog
fi
if [ ! -d $userhome/testlog ]
then
  echo "Invalid username $7 or user configuration!!!"
  echo " try using -U"
  exit 1
fi
if [ "$svc_root" == "" -o "$svc_file" == "" ]
then
  for v in v7 v8 lp .
  do
    if [ -d $userhome/$v ]
    then
      if [ -z "$svc_root" ]
      then
        if [ "$v" == "." ]
        then
          svc_root="$userhome"
        else
          svc_root="$userhome/$v"
        fi
      fi
    fi
  done
  if [ "$svc_root" != "" ]
  then
    for s in server openerp
    do
      if [ -e $svc_root/$s -a "$svc_file" == "" ]
      then
        svc_file="$svc_root/$s/openerp-server"
      fi
     done
  fi
fi
if [ -z "$svc_root" ]
then 
  echo "Service root directory not found!!!"
  echo " try using -r"
  exit 1
fi
if [ -z "$svc_file" ]
then
  echo "Service file script not found!!!"
  echo " try using -F"
  exit 1
fi
if [ ! -d "$svc_root" ]
then
  echo "Service root directory not found!!!"
  echo " try using -r"
  exit 1
fi
if [ ! -e "$svc_file" ]
then
  echo "Service file script not found!!!"
  echo " try using -F"
  exit 1
fi
dir_tlog="$userhome/testlog"
prm="$opt_user^$odoo_cfg^$userhome^$svc_root^$dir_tlog^$svc_name^$svc_file^$svc_port"
pidfile=$(get_cfg_value $odoo_cfg "pidfile")
odoo_port=$(get_cfg_value $odoo_cfg "xmlrpc_port")

# kill all duplicate odoo processes
kill_alls "" "$pidfile"

if [ "$opt_action" == "test" ]
then
  if [ "$opt_verbose" == "-v" ]
  then
    echo "Creating empty $opt_db database"
  fi
  echo "">odoo_test_t.py
  echo "import oerplib">>odoo_test_t.py
  admpw=$(get_cfg_value "$odoo_cfg" "admin_passwd")
  echo "oerp = oerplib.OERP('localhost', protocol='xmlrpc', port=$odoo_port)">>odoo_test_t.py
  echo "try:">>odoo_test_t.py
  echo "    oerp.db.drop(\"$admpw\", \"$opt_db\")">>odoo_test_t.py
  echo "except:">>odoo_test_t.py
  echo "    pass">>odoo_test_t.py
  echo "oerp.db.create(\"$admpw\", \"$opt_db\", True, \"en_US\", \"test2015\")">>odoo_test_t.py
  python odoo_test_t.py
  rm -f python odoo_test_t.py
fi
# if [ "$opt_action" == "test" -o "$opt_action" == "list" ]
# then
  if [ "$opt_verbose" == "-v" ]
  then
     echo "Building module list .."
  fi
  mpath=$(get_cfg_value $odoo_cfg "addons_path")
  mpath=`echo ${mpath//,/ }`
  p="${svc_file%/*}"
  if [ "$p" != "" ]
  then
    if ! `echo "$mpath"|grep "$p/openerp/addons">/dev/null`
    then
      mpath="$p/openerp/addons $mpath"
    fi
  fi
  echo "">test_odoo.tmp
  prio_list=""
  for r in $mpath
  do
    for f in `find $r -name "__openerp__.py" -exec grep -l "'test'" '{}' \;`
    do
      p=$(dirname $f)
      echo $p>>test_odoo.tmp
      for f1 in `cat $f|tr -d '\n'|pcregrep -o "'depends'.*]"|awk -F"[" '{print $2}'|awk -F"]" '{print $1}'`
      do
        x=$(echo $f1|tr -d "'")
        xx=$(echo ${x//,/ })
        for x in $xx
        do
          if ! `echo "$prio_list"|grep "$x ">/dev/null`
          then
            prio_list="$x $prio_list" 
          fi
          let prio_list_$x=prio_list_$x+1
        done
      done
    done
    for f in `find $r -name "*.yml"`
    do
      p=$(dirname $f)
      echo $p>>test_odoo.tmp
    done
  done
  m=0
  for f in $prio_list
  do
    x=prio_list_$f
    if [ ${!x} -gt $m ]
    then
      m=${!x}
    fi
  done
  let d="($m+7)/8"
  for f in $prio_list
  do
    x=prio_list_$f
    n=${!x}
    let r="($m-$n)/$d"
    if [ $r -eq 0 ]; then r=1; fi
    if [ $r -gt 9 ]; then r=9; fi
    let prio_list_$f=$r
  done
  cat test_odoo.tmp|sort -u -o test_odoo.lst
  rm -f test_odoo.tmp
  for f in `cat test_odoo.lst`
  do
    p=$(dirname $f)
    m=$(get_module_name "$p" "$odoo_cfg" "$r" "$svc_file")
    if [ "$m" != "" ]
    then
      prio=$(get_module_prio $p)
      if [ "$opt_module" == "" -o "$opt_module" == "$m" ]
      then
        if ! `echo "$yaml_test_list"|grep "$m:">/dev/null`
        then
          yaml_test_list="$yaml_test_list,$m:$prio"
        fi
      fi
    fi
  done
  rm -f test_odoo.lst
  yaml_test_list=${yaml_test_list:1}
# fi
if [ "$opt_action" == "test" ]
then
  if [ "$opt_quick" == "-q" ]
  then
    wait4svcup "$odoo_port"
    if [ "$svc_port" == "$odoo_port" ]
    then
      service_down "$svc_name" "$odoo_cfg"
    fi
  fi
fi
if [ "$opt_all" == "--all" ]
then
  for opt_prio in {1..9}
  do
    opts="$opt_force$opt_verbose$opt_trace$opt_new$opt_quick"
    search4tests "$opts" "$opt_prio" "$opt_module" "$opt_action" "$opt_db" "$prm" "$yaml_test_list"
    opt_new=""
    opt_force="-y"
  done
else
  opts="$opt_force$opt_verbose$opt_trace$opt_new$opt_quick"
  search4tests "$opts" "$opt_prio" "$opt_module" "$opt_action" "$opt_db" "$prm" "$yaml_test_list"
fi
if [ "$opt_action" == "test" ]
then
  if [ "$opt_quick" == "-q" ]
  then
    if ! `service_sts "" "$odoo_cfg"`
    then
      service_up "$svc_name" "$odoo_cfg"
    fi
  elif [ "$svc_port" == "$odoo_port" ]
  then
    service_down "$svc_name" "$odoo_cfg"
    service_up "$svc_name" "$odoo_cfg"
  fi
  resultlog="$dir_tlog/result.log"
  chown $opt_user:$opt_user $resultlog
  chmod a+r $resultlog
  if [ "$opt_stats" == "-x" ]
  then
    ts=`date +%Y-%m-%d`
    grep "$ts" $resultlog
  fi
fi
if [ "$opt_action" == "stat" ]
then
  grep " $opt_module " $resultlog
fi
service $svc_name status

